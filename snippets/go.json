{
  "todo gamidli": {
    "prefix": "td",
    "body": ["// TODO: Gamidli: "]
  },
  "test starter": {
    "prefix": "ttstarter",
    "body": [
      "func Test${1:Function}(t *testing.T) {",
      "\ttype given struct {",
      "\t\twantErr bool",
      "\t\terrCode codes.Code",
      "\t}",
      "\ttype expected struct{}",
      "\ttests := []struct {",
      "\t\tname     string",
      "\t\tgiven    given",
      "\t\texpected expected",
      "\t}{",
      "\t\t{\"test name\", given{}, expected{}},",
      "\t}",
      "\tfor _, tt := range tests {",
      "\t\tt.Run(tt.name, func(t *testing.T) {",
      "\t\t\t// given",
      "\t\t\tctx := CreateTestContext()",
      "",
      "\t\t\t// when",
      "\t\t\tactual, err := ${2:Function}(tt.given)",
      "\t\t\tif err != nil {",
      "\t\t\t\tif !tt.given.wantErr {",
      "\t\t\t\t\tt.Fatalf(\"error was not expected, error = %v\", err)",
      "\t\t\t\t}",
      "\t\t\t\terrCode := grpcStatus.Code(err)",
      "\t\t\t\tif errCode != tt.given.errCode {",
      "\t\t\t\t\tt.Fatalf(\"error = %v, errCode =%v wantErrCode %v\", err, errCode, tt.given.errCode)",
      "\t\t\t\t}",
      "\t\t\t}",
      "",
      "\t\t\t// then",
      "\t\t\tif d := cmp.Diff(actual, tt.expected); d != \"\" {",
      "\t\t\t\tt.Fatalf(\"responses differ, expected(+) got(-):\\n%v\", d)",
      "\t\t\t}",
      "\t\t})",
      "\t}",
      "}"
    ]
  }
}
