{
  "todo gamidli": {
    "prefix": "todo gamidli",
    "body": ["// TODO: Gamidli: "]
  },

  "test structure": {
    "prefix": "test structure",
    "body": [
      "func Test${1:Function}(t *testing.T) {",
      "\ttype given struct {}",
      "\ttype expected struct {}",
      "\ttests := []struct {",
      "\t\tname     string",
      "\t\tgiven    given",
      "\t\texpected expected",
      "\t}{}",
      "\tfor _, tt := range tests {",
      "\t\tt.Run(tt.name, func(t *testing.T) {})",
      "\t}",
      "}"
    ]
  },
  "lro process function": {
    "prefix": "lro process function",
    "body": [
      "func (svc *${1:Service}) process${2:Function}(ctx context.Context, op *operation.Operation, completeStep operation.CompleteStep) (err error) {",
      "\tif op.LastCompletedStep < ${3:step} {",
      "\t\terr = svc.${3:step}(ctx, op, completeStep)",
      "\t\tif err != nil {",
      "\t\t\treturn operation.NewTechnicalError(",
      "\t\t\t\tcodes.Internal,",
      "\t\t\t\terr,",
      "\t\t\t\toperation.Permanent,",
      "\t\t\t)",
      "\t\t}",
      "\t}",
      "",
      "\treturn nil",
      "}"
    ]
  },
  "lro step function": {
    "prefix": "lro step function",
    "body": [
      "func (svc *${1:Service}) ${2:step}(ctx context.Context, op *operation.Operation, completeStep operation.CompleteStep) (err error) {",
      "\tctx, linkedSpans := tracing.StartLinkedSpans(ctx, \"${2:step}\")",
      "\tdefer func() {",
      "\t\tif err != nil {",
      "\t\t\tlinkedSpans.RecordError(err)",
      "\t\t\tlinkedSpans.SetStatus(tracecodes.Error, err.Error())",
      "\t\t}",
      "\t\tlinkedSpans.End()",
      "\t}()",
      "",
      "\tcustomData := ${3:customDataType}{}",
      "\terr = json.Unmarshal(op.CustomDataJson, &customData)",
      "\tif err != nil {",
      "\t\treturn fmt.Errorf(\"could not unmarshal operation custom data as ${3:customDataType}: %w\", err)",
      "\t}",
      "",
      "\top.CustomDataJson, err = json.Marshal(customData)",
      "\tif err != nil {",
      "\t\treturn fmt.Errorf(\"marshal custom data json: %w\", err)",
      "\t}",
      "",
      "\terr = completeStep(ctx, ${2:step}, \"\", op.CustomDataJson)",
      "\tif err != nil {",
      "\t\treturn fmt.Errorf(\"could not set step ${2:step} as completed: %w\", err)",
      "\t}",
      "",
      "\treturn nil",
      "}"
    ]
  }
}
